#!/usr/bin/perl -w

use strict;
use warnings;

use JSON::PP qw();
use IO::File;
use Cwd qw();
use File::Spec qw();
use File::Basename qw(basename);

use Getopt::Long qw(:config version bundling pass_through);

# Constants
use constant DEFAULT_CONFIG_FILE => q(.iospsync.json);

# Globals
our $VERSION = q(1.2.0);
our $HOME = (getpwuid($<))[7];

my ($help, $rlink, $config, $syncdir, $stdin);

GetOptions(
    'h|help' => \$help,
    'rlink|relative-link!' => \$rlink,
    'config=s' => \$config,
    'sync-dir=s' => \$syncdir,
    'stdin' => \$stdin
) or die 'Invalid usage; please run with --help';

if ($help) {
    usage();
    exit(0);
}

if (defined $config) {
    die 'Invalid --config' unless (-f $config);
} else {
    $config = File::Spec->catfile($HOME, DEFAULT_CONFIG_FILE);
}

if ($stdin) {
    die '--stdin specified, but file arguments detected' if (scalar(@ARGV) != 0);
} elsif (scalar @ARGV == 0) {
    die 'No files provided';
}

# Main
my $sconf = SyncConfig->new($config);

if (defined $rlink) {
    print STDOUT 'Relative link set to ', $rlink, ' via command argument', "\n";
} else {
    $rlink = $sconf->isRelativeLink();
    print STDOUT 'Relative link set to ', $rlink, "\n";
}

$syncdir ||= $sconf->getSyncDirectory();
die 'No sync dir specified; please check ', $config, ' and/or the command line' unless (defined $syncdir);
die 'Invalid sync directory' unless (-d $syncdir);

print STDOUT 'Sync dir set to ', $syncdir, "\n";

# Map files
my @toLink;

# Create iterator
my $iter = ($stdin) ? HandleFileIterator->new(\*STDIN) : ARGVFileIterator->new(\@ARGV);
while (my $file = $iter->next()) {
    if (-e $file) {
        my $full = Cwd::abs_path($file);
        die 'Unable to determine absolute path for ', $file unless (defined $full);
        die $full, ' is not a file' unless (-f $full);

        if ($rlink) {
            my $link = File::Spec->abs2rel($full, $syncdir);
            push(@toLink, $link);
        } else {
            push(@toLink, $full);
        }
    } else {
        die 'Unable to locate ', $file;
    }
}

# Determine link settings
my @errors;
foreach my $x (@toLink) {
    my $create = File::Spec->catfile($syncdir, basename($x));
    print STDOUT 'Creating symlink: ', $create, ' -> ', $x, "\n";

    my $check = symlink($x, $create);
    if (!$check) {
        print STDOUT '[ERROR] Symlink creation failed!', "\n";
        push(@errors, [ $create, $x ]);
    }
}

my $rc = 0;
if (scalar(@errors) > 0) {
    print STDOUT 'Failed to create the following symlinks:', "\n";
    print STDOUT ' - ', $_->[0], ' -> ', $_->[1], "\n" foreach (@errors);
    $rc = 1;
}

exit($rc);

sub usage {
    my $scriptname = basename($0);

    print STDOUT <<__USAGE_END__;

Usage: $scriptname

    h|help:
        Print this screen.

    rlink|relative-link|no-rlink|no-relative-link:
        Enable or disable if the created link should be relative or an
        absolute path.

    config <path to config>:
        Specify an alternate configuration file.

    sync-dir <path to directory>:
        The directory in which to create the symlink.

    stdin
        Read files from STDIN instead of the argument list.

__USAGE_END__

    return 1;
}

#
# Objects
#
package SyncConfig;

use strict;
use warnings;

use Carp qw();

sub new {
    my $pkg = shift;
    my ($file) = @_;

    my $obj = _load_config($file);
    return bless($obj, $pkg);
}

sub isRelativeLink {
    return $_[0]->{'rlink'};
}

sub getSyncDirectory {
    return $_[0]->{'sync_dir'};
}

sub _load_config {
    my ($file) = @_;

    my $fh = IO::File->new();
    $fh->open($file, 'r') or Carp::confess('Failed to open ', $file, ' for read');

    my @buffer;
    while (my $line = $fh->getline()) {
        push(@buffer, $line);
    }

    $fh->close() or Carp::cluck($!);

    my $json = join('', @buffer);

    my $ref = JSON::PP::decode_json($json);

    my $ret = {};

    # Validate as we can.
    if (defined $ref->{'useRelativeLink'}) {
        my $value = $ref->{'useRelativeLink'};
        Carp::croak('Invalid value for useRelativeLink in JSON configuration') unless (JSON::PP::is_bool($value));
        $ret->{'rlink'} = ($value) ? 1 : 0;
    } else {
        $ret->{'rlink'} = 0;
    }

    if (defined $ref->{'defaultSyncDir'}) {
        my $value = $ref->{'defaultSyncDir'};
        Carp::croak('Invalid value for defaultSyncDir in JSON configuration') if (ref($value));

        $value =~ s!^~/!qq(${main::HOME}/)!e;

        $ret->{'sync_dir'} = $value;
    }

    return $ret;
}

#---

package FileIterator;

use strict;
use warnings;

use Carp qw();

sub new {
    my $pkg = shift;
    return bless({}, $pkg);
}

sub next {
    Carp::confess("Not implemented");
}

sub close {
    return 1;
}

package HandleFileIterator;

use strict;
use warnings;

use parent -norequire, 'FileIterator';

sub new {
    my $pkg = shift;

    my $obj = $pkg->SUPER::new();
    $obj->{'fh'} = $_[0];

    return bless($obj, $pkg);
}

sub next {
    my ($self) = @_;

    my $ret = $self->{'fh'}->getline();

    if (defined $ret) {
        chomp($ret);
    }

    return $ret;
}

sub close {
    my ($self) = @_;
    $self->SUPER::close();
    return $self->{'fh'}->close();
}

package ARGVFileIterator;

use strict;
use warnings;

use parent -norequire, 'FileIterator';

sub new {
    my $pkg = shift;

    my $obj = $pkg->SUPER::new();

    my $argv = $_[0];

    $obj->{'i'} = 0;
    $obj->{'argc'} = scalar(@{$argv});
    $obj->{'argv'} = $argv;

    return bless($obj, $pkg);
}

sub next {
    my ($self) = @_;

    my $current = $self->{'i'}++;
    return ($current < $self->{'argc'}) ? $self->{'argv'}->[$current] : undef;
}
